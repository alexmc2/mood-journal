generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  clerkId String           @unique
  email   String           @unique

  entries  JournalEntry[]
  analyses Analysis[]
  chats    Chat[]
  messages Message[]
}

model JournalEntry {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  userId String
  user   User              @relation(fields: [userId], references: [id])

  content String           @db.Text
  contentHash String?      // New field for storing the content hash

  analysis Analysis?

  @@unique([userId, id])
}

model Analysis {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  entryId String
  entry   JournalEntry    @relation(fields: [entryId], references: [id], onDelete: Cascade)

  userId String 
  user   User             @relation(fields: [userId], references: [id])

  mood            String
  summary         String  @db.Text
  color           String
  negative        Boolean
  subject         String
  sentimentScore  Float   @default(0)

  @@unique([entryId])
  @@index ([userId])
}

model Chat {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  userId   String
  user     User      @relation(fields: [userId], references: [id])

  messages Message[]

  @@index([userId])
}

model Message {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  chatId String
  chat   Chat        @relation(fields: [chatId], references: [id])

  userId String?  // Allow null for system messages
  user   User?    @relation(fields: [userId], references: [id])
  isUser Boolean  // Indicates if the message is from a user

  text String     @db.Text


  @@index([chatId])
  @@index([userId])
}
