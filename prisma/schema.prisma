

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  // directUrl         = env("DIRECT_URL")
  extensions        = [vector]
}


generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

model User {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  clerkId String           @unique
  email   String           @unique

  entries  JournalEntry[]
  analyses Analysis[]
  chats    Chat[]
  chatSessions ChatSession[]
  messages Message[]
  documents documents[]
}

model JournalEntry {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  userId String
  user   User              @relation(fields: [userId], references: [id])

  content String           @db.Text
  contentHash String?      // New field for storing the content hash

  analysis Analysis?
  documents documents[]
  embedding Unsupported("vector(1536)")?

  @@unique([userId, id])
}

model Analysis {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  entryId String
  entry   JournalEntry    @relation(fields: [entryId], references: [id], onDelete: Cascade)

  userId String 
  user   User             @relation(fields: [userId], references: [id])

  mood            String
  summary         String  @db.Text
  color           String
  negative        Boolean
  subject         String
  sentimentScore  Float   @default(0)

  @@unique([entryId])
  @@index ([userId])
}

model Chat {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  userId   String
  user     User      @relation(fields: [userId], references: [id])

  messages Message[]
  summary   String?   @db.Text
  documents documents[]
  embedding Unsupported("vector(1536)")?

  @@index([userId])
}

model Message {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  chatId String
  chat   Chat        @relation(fields: [chatId], references: [id])

  userId String?  // Allow null for system messages
  user   User?    @relation(fields: [userId], references: [id])
  isUser Boolean  // Indicates if the message is from a user

  text String     @db.Text
  embedding Unsupported("vector(1536)")?


  @@index([chatId])
  @@index([userId])
}


model ChatSession {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  data      String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  embedding Unsupported("vector(1536)")?

  @@index([userId])
}


model documents {
  id            BigInt    @id @default(autoincrement())
  
  content       String
  metadata      Json
  embedding     Unsupported("vector(1536)")

  userId        String?    // User ID
  journalEntryId String?   // Nullable Journal Entry ID
  chatId        String?   // Nullable Chat ID

  // Relations
  user          User?     @relation(fields: [userId], references: [id])
  journalEntry  JournalEntry? @relation(fields: [journalEntryId], references: [id])
  chat          Chat?     @relation(fields: [chatId], references: [id])

  @@index([userId])
  @@index([journalEntryId])
  @@index([chatId])
}